//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DrSavviAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DrSavvyEntities : DbContext
    {
        public DrSavvyEntities()
            : base("name=DrSavvyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Access_Control> Access_Control { get; set; }
        public virtual DbSet<Ailment> Ailments { get; set; }
        public virtual DbSet<Allergy> Allergies { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Backlog> Backlogs { get; set; }
        public virtual DbSet<Consultation> Consultations { get; set; }
        public virtual DbSet<Consultation_Ailment> Consultation_Ailment { get; set; }
        public virtual DbSet<Consultation_Procedure> Consultation_Procedure { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employee_Role> Employee_Role { get; set; }
        public virtual DbSet<Institute> Institutes { get; set; }
        public virtual DbSet<Institute_Type> Institute_Type { get; set; }
        public virtual DbSet<Medical_Aid_Claim> Medical_Aid_Claim { get; set; }
        public virtual DbSet<Medical_Aid_Company> Medical_Aid_Company { get; set; }
        public virtual DbSet<Medical_Aid_Scheme> Medical_Aid_Scheme { get; set; }
        public virtual DbSet<Medication> Medications { get; set; }
        public virtual DbSet<MobileApp> MobileApps { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Order_Line> Order_Line { get; set; }
        public virtual DbSet<Order_Payment> Order_Payment { get; set; }
        public virtual DbSet<Order_Status> Order_Status { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Patient_Allergy_List> Patient_Allergy_List { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Payment_Type> Payment_Type { get; set; }
        public virtual DbSet<Prescription_Line> Prescription_Line { get; set; }
        public virtual DbSet<Price> Prices { get; set; }
        public virtual DbSet<Procedure> Procedures { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Product_Procedure> Product_Procedure { get; set; }
        public virtual DbSet<Product_Type> Product_Type { get; set; }
        public virtual DbSet<Reconcilliation> Reconcilliations { get; set; }
        public virtual DbSet<Referral> Referrals { get; set; }
        public virtual DbSet<Referral_Test> Referral_Test { get; set; }
        public virtual DbSet<Sick_Note> Sick_Note { get; set; }
        public virtual DbSet<Stock_Take> Stock_Take { get; set; }
        public virtual DbSet<Stock_take_Line> Stock_take_Line { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<Test_Type> Test_Type { get; set; }
        public virtual DbSet<Timeslot> Timeslots { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Xray> Xrays { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int AddMobileApp(string appDate, string appTime, string patientName, string patientSurname, string appDescr, Nullable<int> appID)
        {
            var appDateParameter = appDate != null ?
                new ObjectParameter("AppDate", appDate) :
                new ObjectParameter("AppDate", typeof(string));
    
            var appTimeParameter = appTime != null ?
                new ObjectParameter("AppTime", appTime) :
                new ObjectParameter("AppTime", typeof(string));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var patientSurnameParameter = patientSurname != null ?
                new ObjectParameter("PatientSurname", patientSurname) :
                new ObjectParameter("PatientSurname", typeof(string));
    
            var appDescrParameter = appDescr != null ?
                new ObjectParameter("AppDescr", appDescr) :
                new ObjectParameter("AppDescr", typeof(string));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMobileApp", appDateParameter, appTimeParameter, patientNameParameter, patientSurnameParameter, appDescrParameter, appIDParameter);
        }
    
        public virtual int BackupDrSavvy(string path, string fileName, string fileDate, string name)
        {
            var pathParameter = path != null ?
                new ObjectParameter("path", path) :
                new ObjectParameter("path", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var fileDateParameter = fileDate != null ?
                new ObjectParameter("fileDate", fileDate) :
                new ObjectParameter("fileDate", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BackupDrSavvy", pathParameter, fileNameParameter, fileDateParameter, nameParameter);
        }
    
        public virtual int CalcBacklogQty(Nullable<decimal> orderQty, Nullable<decimal> receivedQty, Nullable<decimal> backlogQty, Nullable<int> orderLineID)
        {
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(decimal));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(decimal));
    
            var backlogQtyParameter = backlogQty.HasValue ?
                new ObjectParameter("BacklogQty", backlogQty) :
                new ObjectParameter("BacklogQty", typeof(decimal));
    
            var orderLineIDParameter = orderLineID.HasValue ?
                new ObjectParameter("OrderLineID", orderLineID) :
                new ObjectParameter("OrderLineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalcBacklogQty", orderQtyParameter, receivedQtyParameter, backlogQtyParameter, orderLineIDParameter);
        }
    
        public virtual int DisplayPatientDetails(Nullable<int> patientID, ObjectParameter patientName, ObjectParameter patientSurname, ObjectParameter patientIDNumber)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisplayPatientDetails", patientIDParameter, patientName, patientSurname, patientIDNumber);
        }
    
        public virtual int ReduceInventory(Nullable<int> consultationID)
        {
            var consultationIDParameter = consultationID.HasValue ?
                new ObjectParameter("ConsultationID", consultationID) :
                new ObjectParameter("ConsultationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReduceInventory", consultationIDParameter);
        }
    
        public virtual int RemoveMobileAppointment(Nullable<int> appointmentID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveMobileAppointment", appointmentIDParameter);
        }
    
        public virtual int SetAppointmentStatus(Nullable<int> appointmentID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetAppointmentStatus", appointmentIDParameter);
        }
    }
}
